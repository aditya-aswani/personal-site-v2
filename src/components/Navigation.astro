---
const currentPath = Astro.url.pathname;

const navItems = [
  { href: currentPath === "/" ? "#home" : "/", label: "Home" },
  { href: currentPath === "/" ? "#work" : "/#work", label: "Work" },
  { href: currentPath === "/" ? "#writing" : "/#writing", label: "Writing" },
  { href: "/contact", label: "Contact" }
];
---

<nav>
  <div class="nav-container">
    <div class="logo">
      <img src="/dove.svg" alt="Dove Logo" width="32" height="32" />
    </div>
    <ul class="nav-links">
      {navItems.map(item => (
        <li><a href={item.href}>{item.label}</a></li>
      ))}
    </ul>
    <div class="nav-controls">
      <button class="theme-toggle" aria-label="Toggle theme">
        <span class="theme-icon dark">üåô</span>
        <span class="theme-icon light">‚òÄÔ∏è</span>
      </button>
      <button class="mobile-menu">‚ò∞</button>
    </div>
  </div>
</nav>

<style>
  nav {
    position: fixed;
    top: 0;
    width: 100%;
    padding: 1.5rem 2rem;
    background: rgba(10, 10, 10, 0.8);
    backdrop-filter: blur(10px);
    z-index: 1000;
    transition: all 0.3s ease, background-color 0.3s ease !important;
  }

  :root[data-theme="light"] nav {
    background: rgba(255, 255, 255, 0.85);
  }

  .nav-container {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .logo {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .logo img {
    filter: drop-shadow(0 0 8px rgba(107, 126, 55, 0.6));
    transition: all 0.3s ease;
  }

  .logo img:hover {
    filter: drop-shadow(0 0 12px rgba(107, 126, 55, 0.8));
    transform: scale(1.1);
  }

  .nav-links {
    display: flex;
    gap: 2rem;
    list-style: none;
  }

  .nav-links a {
    color: var(--text-primary);
    text-decoration: none;
    transition: color 0.3s ease;
    position: relative;
    font-weight: 500;
  }

  .nav-links a:hover {
    color: var(--accent-hover);
  }

  .nav-links a::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 0;
    height: 2px;
    background: var(--accent);
    transition: width 0.3s ease;
  }

  .nav-links a:hover::after {
    width: 100%;
  }

  .nav-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .theme-toggle {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1.25rem;
    padding: 0.5rem;
    border-radius: 8px;
    transition: all 0.3s ease;
    position: relative;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .theme-toggle:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  :root[data-theme="light"] .theme-toggle:hover {
    background: rgba(0, 0, 0, 0.1);
  }

  .theme-icon {
    position: absolute;
    transition: all 0.3s ease;
  }

  .theme-icon.dark {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  .theme-icon.light {
    opacity: 0;
    transform: rotate(180deg) scale(0.8);
  }

  :root[data-theme="light"] .theme-icon.dark {
    opacity: 0;
    transform: rotate(-180deg) scale(0.8);
  }

  :root[data-theme="light"] .theme-icon.light {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  .mobile-menu {
    display: none;
    background: none;
    border: none;
    color: var(--text-primary);
    font-size: 1.5rem;
    cursor: pointer;
  }

  @media (max-width: 768px) {
    .nav-links {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background: var(--bg-primary);
      backdrop-filter: blur(10px);
      flex-direction: column;
      padding: 1rem 2rem;
      gap: 1rem;
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
      transform: translateY(-10px);
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      border: 1px solid var(--border);
    }
    
    .nav-links.active {
      transform: translateY(0);
      opacity: 1;
      visibility: visible;
    }
    
    .nav-controls {
      gap: 0.5rem;
    }
    
    .theme-toggle {
      width: 36px;
      height: 36px;
      font-size: 1.1rem;
    }
    
    .mobile-menu {
      display: block;
    }
  }
</style>

<script>
  // Theme management
  const getStoredTheme = () => localStorage.getItem('theme');
  const getPreferredTheme = () => {
    const storedTheme = getStoredTheme();
    if (storedTheme) return storedTheme;
    return window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
  };

  const setTheme = (theme) => {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
  };

  // Update navigation background based on theme and scroll
  const updateNavBackground = () => {
    const nav = document.querySelector('nav');
    if (!nav) return;
    
    const currentScroll = window.pageYOffset;
    const theme = document.documentElement.getAttribute('data-theme');
    const isDark = theme === 'dark' || !theme;
    
    if (currentScroll > 100) {
      nav.style.background = isDark ? 'rgba(10, 10, 10, 0.95)' : 'rgba(255, 255, 255, 0.95)';
      nav.style.boxShadow = isDark ? '0 5px 20px rgba(0, 0, 0, 0.3)' : '0 5px 20px rgba(0, 0, 0, 0.1)';
    } else {
      nav.style.background = isDark ? 'rgba(10, 10, 10, 0.8)' : 'rgba(255, 255, 255, 0.85)';
      nav.style.boxShadow = 'none';
    }
  };

  // Initialize theme on page load
  document.addEventListener('DOMContentLoaded', () => {
    const theme = getPreferredTheme();
    setTheme(theme);
    
    // Update nav background after theme is set
    setTimeout(updateNavBackground, 0);

    // Theme toggle functionality
    const themeToggle = document.querySelector('.theme-toggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        setTheme(newTheme);
        // Update nav background immediately after theme change
        setTimeout(updateNavBackground, 0);
      });
    }

    // Mobile menu toggle
    const mobileMenuBtn = document.querySelector('.mobile-menu');
    const navLinks = document.querySelector('.nav-links');
    
    if (mobileMenuBtn && navLinks) {
      mobileMenuBtn.addEventListener('click', () => {
        navLinks.classList.toggle('active');
        
        // Change hamburger icon when open
        if (navLinks.classList.contains('active')) {
          mobileMenuBtn.textContent = '‚úï';
        } else {
          mobileMenuBtn.textContent = '‚ò∞';
        }
      });
      
      // Close menu when clicking on a link
      navLinks.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', () => {
          navLinks.classList.remove('active');
          mobileMenuBtn.textContent = '‚ò∞';
        });
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!e.target.closest('nav')) {
          navLinks.classList.remove('active');
          mobileMenuBtn.textContent = '‚ò∞';
        }
      });
    }
  });

  // Dynamic navigation background
  window.addEventListener('scroll', updateNavBackground);
</script>