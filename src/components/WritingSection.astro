---
// TypeScript interfaces
interface BlogPost {
  title: string;
  link: string;
  date: string;
  description: string;
}

interface RSSItem {
  title: string;
  link: string;
  pubDate: string;
  description?: string;
}

interface RSSFeed {
  rss?: {
    channel?: {
      item?: RSSItem | RSSItem[];
    };
  };
}

// Fetch from both Substack RSS Feeds
const ADITYA_SUBSTACK = 'adityaaswani'; // adityaaswani.substack.com
const GENTLE_VELOCITY_SUBSTACK = 'gentlevelocity'; // gentlevelocity.substack.com

let adityaPosts: BlogPost[] = [];
let gentleVelocityPosts: BlogPost[] = [];

// Fetch Aditya's posts
try {
  const response = await fetch(`https://${ADITYA_SUBSTACK}.substack.com/feed`, {
    headers: {
      'User-Agent': 'Mozilla/5.0 (compatible; AstroSite/1.0)'
    }
  });
  
  if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  
  const text = await response.text();
  if (!text || text.length < 100) throw new Error('Empty or invalid RSS response');
  
  const { XMLParser } = await import('fast-xml-parser');
  const parser = new XMLParser({
    ignoreAttributes: false,
    parseTagValue: true,
    parseAttributeValue: false,
    trimValues: true
  });
  
  const result: RSSFeed = parser.parse(text);
  const items = result.rss?.channel?.item;
  
  if (!items) throw new Error('No RSS items found');
  
  const itemsArray = Array.isArray(items) ? items : [items];
  
  adityaPosts = itemsArray.slice(0, 3).map((item: RSSItem) => ({
    title: item.title || 'Untitled Post',
    link: item.link || `https://${ADITYA_SUBSTACK}.substack.com`,
    date: new Date(item.pubDate).toLocaleDateString('en-US', { 
      day: 'numeric',
      month: 'long', 
      year: 'numeric' 
    }),
    description: item.description?.replace(/<[^>]*>/g, '').substring(0, 120) || 'Click to read more...'
  }));
} catch (error) {
  console.error('Error fetching Aditya Substack posts:', error);
  // Fallback posts for when RSS fails during build
  adityaPosts = [
    {
      title: "Love, Meditation, and Mindful Living",
      date: "January 15, 2025",
      link: `https://${ADITYA_SUBSTACK}.substack.com`,
      description: "Exploring the intersection of self-love, meditation practice, and creating a meaningful life in the modern world"
    },
    {
      title: "The Journey Within",
      date: "January 8, 2025", 
      link: `https://${ADITYA_SUBSTACK}.substack.com`,
      description: "Reflections on inner growth, personal transformation, and the path to authentic self-discovery"
    },
    {
      title: "Mindfulness in Daily Life",
      date: "January 1, 2025",
      link: `https://${ADITYA_SUBSTACK}.substack.com`,
      description: "Practical approaches to bringing meditation and awareness into everyday activities and interactions"
    }
  ];
}

// Fetch Gentle Velocity posts
try {
  const response = await fetch(`https://${GENTLE_VELOCITY_SUBSTACK}.substack.com/feed`, {
    headers: {
      'User-Agent': 'Mozilla/5.0 (compatible; AstroSite/1.0)'
    }
  });
  
  if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  
  const text = await response.text();
  if (!text || text.length < 100) throw new Error('Empty or invalid RSS response');
  
  const { XMLParser } = await import('fast-xml-parser');
  const parser = new XMLParser({
    ignoreAttributes: false,
    parseTagValue: true,
    parseAttributeValue: false,
    trimValues: true
  });
  
  const result: RSSFeed = parser.parse(text);
  const items = result.rss?.channel?.item;
  
  if (!items) throw new Error('No RSS items found');
  
  const itemsArray = Array.isArray(items) ? items : [items];
  
  gentleVelocityPosts = itemsArray.slice(0, 3).map((item: RSSItem) => ({
    title: item.title || 'Untitled Post',
    link: item.link || `https://${GENTLE_VELOCITY_SUBSTACK}.substack.com`,
    date: new Date(item.pubDate).toLocaleDateString('en-US', { 
      day: 'numeric',
      month: 'long', 
      year: 'numeric' 
    }),
    description: item.description?.replace(/<[^>]*>/g, '').substring(0, 120) || 'Click to read more...'
  }));
} catch (error) {
  console.error('Error fetching Gentle Velocity posts:', error);
  // Fallback posts for when RSS fails during build
  gentleVelocityPosts = [
    {
      title: "Building with Intention",
      date: "January 12, 2025",
      link: `https://${GENTLE_VELOCITY_SUBSTACK}.substack.com`,
      description: "Quick thoughts on creating technology that serves human flourishing and conscious living"
    },
    {
      title: "Digital Minimalism Updates",
      date: "January 5, 2025", 
      link: `https://${GENTLE_VELOCITY_SUBSTACK}.substack.com`,
      description: "Brief reflections on reducing digital clutter and building more intentional relationships with technology"
    },
    {
      title: "Tech Tools for Mindfulness",
      date: "December 28, 2024",
      link: `https://${GENTLE_VELOCITY_SUBSTACK}.substack.com`,
      description: "Short updates on apps and tools that support meditation, focus, and conscious technology use"
    }
  ];
}

// OPTION 2: If you prefer to use Substack's embed widget instead, 
// comment out the above and use this in the HTML below:
// <iframe src="https://YOUR-SUBSTACK-URL.substack.com/embed" width="100%" height="320" style="border:1px solid #EEE; background:white;" frameborder="0" scrolling="no"></iframe>
---

<section id="writing" class="fade-in">
  <h2 class="section-title">My Blogs</h2>
  
  <div class="writing-columns">
    <!-- Left Column: Personal Posts -->
    <div class="writing-column">
      <h3 class="column-title">Love Yourself Unconditionally</h3>
      <p class="column-subtitle">Long-form essays</p>
      <div class="writing-list">
        {adityaPosts.map(post => (
          <a href={post.link} class="writing-item" target="_blank" rel="noopener noreferrer">
            <div>
              <h4>{post.title}</h4>
              <span class="date">{post.date}</span>
              {post.description && <p class="description">{post.description}</p>}
            </div>
            <span class="arrow">→</span>
          </a>
        ))}
      </div>
      <div class="view-all">
        <a href={`https://${ADITYA_SUBSTACK}.substack.com`} target="_blank" rel="noopener noreferrer" class="btn btn-secondary">
          View All Essays →
        </a>
      </div>
    </div>

    <!-- Right Column: Gentle Velocity Posts -->
    <div class="writing-column">
      <h3 class="column-title">Gentle Velocity</h3>
      <p class="column-subtitle">Short-form updates</p>
      <div class="writing-list">
        {gentleVelocityPosts.map(post => (
          <a href={post.link} class="writing-item" target="_blank" rel="noopener noreferrer">
            <div>
              <h4>{post.title}</h4>
              <span class="date">{post.date}</span>
              {post.description && <p class="description">{post.description}</p>}
            </div>
            <span class="arrow">→</span>
          </a>
        ))}
      </div>
      <div class="view-all">
        <a href={`https://${GENTLE_VELOCITY_SUBSTACK}.substack.com`} target="_blank" rel="noopener noreferrer" class="btn btn-secondary">
          View All Updates →
        </a>
      </div>
    </div>
  </div>
</section>

<style>
  section {
    padding: 5rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .section-title {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    text-align: center;
    background: var(--gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .writing-columns {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    margin-top: 3rem;
  }

  .writing-column {
    display: flex;
    flex-direction: column;
  }

  .column-title {
    font-size: 1.25rem;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
    text-align: center;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid var(--border);
  }

  .column-subtitle {
    font-size: 0.875rem;
    color: var(--text-secondary);
    text-align: center;
    margin-bottom: 1.5rem;
    font-style: italic;
  }

  .writing-list {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    flex-grow: 1;
  }

  .writing-item {
    background: var(--bg-secondary);
    border: 1px solid var(--border);
    border-radius: 15px;
    padding: 1.5rem;
    transition: all 0.3s ease;
    display: flex;
    justify-content: space-between;
    align-items: center;
    text-decoration: none;
    color: inherit;
  }

  .writing-item:hover {
    border-color: var(--accent);
    transform: translateX(10px);
  }

  .writing-item h4 {
    color: var(--text-primary);
    margin-bottom: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
  }

  .date {
    color: var(--text-secondary);
    font-size: 0.875rem;
  }

  .description {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin-top: 0.5rem;
    line-height: 1.5;
  }

  .arrow {
    color: var(--text-secondary);
    font-size: 1.5rem;
    transition: transform 0.3s ease;
    flex-shrink: 0;
    margin-left: 1rem;
  }

  .writing-item:hover .arrow {
    transform: translateX(5px);
  }

  .view-all {
    display: flex;
    justify-content: center;
    margin-top: 2rem;
  }

  @media (max-width: 768px) {
    .writing-columns {
      grid-template-columns: 1fr;
      gap: 2rem;
    }
    
    .column-title {
      font-size: 1.125rem;
    }
  }

  .btn-secondary {
    padding: 0.875rem 2rem;
    border-radius: 10px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    border: 2px solid var(--border);
    color: var(--text-primary);
    background: transparent;
  }

  .btn-secondary:hover {
    background: var(--bg-secondary);
    border-color: var(--accent);
  }

  /* Substack embed styles if using Option 2 */
  .substack-embed {
    margin-top: 2rem;
    border-radius: 15px;
    overflow: hidden;
  }

  .substack-embed iframe {
    background: var(--bg-secondary) !important;
    border: 1px solid var(--border) !important;
    border-radius: 15px;
  }
</style>